import { Response } from 'express';
import { AuthenticatedRequest } from '../types';
import User from '../models/User';
import AllowedDevice from '../models/AllowedDevice';
import DesktopRelease from '../models/DesktopRelease';

interface AIResponse {
  content: string;
  suggestions?: string[];
  severity?: 'info' | 'warning' | 'critical';
}

/**
 * Admin AI Assistant with Database Access
 * Provides intelligent insights based on real-time data
 */
export const getAdminAIResponse = async (req: AuthenticatedRequest, res: Response): Promise<void> => {
  try {
    const { message, page, context } = req.body;

    console.log(`ü§ñ [ADMIN AI] Processing request for page: ${page}`);
    console.log(`ü§ñ [ADMIN AI] Message: ${message}`);

    let response: AIResponse;

    switch (page) {
      case 'dashboard':
        response = await getDashboardInsights(message, context);
        break;
      case 'users':
        response = await getUserInsights(message, context);
        break;
      case 'devices':
        response = await getDeviceInsights(message, context);
        break;
      case 'analytics':
        response = await getAnalyticsInsights(message, context);
        break;
      case 'releases':
        response = await getReleaseInsights(message, context);
        break;
      default:
        response = {
          content: 'I can help you analyze admin data. Please specify which area you need assistance with.',
          suggestions: ['Dashboard insights', 'User analysis', 'Security status', 'Analytics review']
        };
    }

    res.status(200).json({
      success: true,
      data: response
    });
  } catch (error: any) {
    console.error('‚ùå [ADMIN AI] Error:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to generate AI response'
    });
  }
};

/**
 * Dashboard Insights with Real-time Data
 */
async function getDashboardInsights(message: string, context: any): Promise<AIResponse> {
  const lowerMessage = message.toLowerCase();

  // Get real-time data
  const totalUsers = await User.countDocuments();
  const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
  const activeSessions = await User.countDocuments({ lastLogin: { $gte: twentyFourHoursAgo } });
  const newUsersToday = await User.countDocuments({
    createdAt: { $gte: new Date(new Date().setHours(0, 0, 0, 0)) }
  });

  if (lowerMessage.includes('health') || lowerMessage.includes('status') || lowerMessage.includes('system')) {
    const activeRatio = totalUsers > 0 ? (activeSessions / totalUsers) * 100 : 0;
    let systemStatus = 'Healthy';
    let severity: 'info' | 'warning' | 'critical' = 'info';

    if (activeRatio < 10) {
      systemStatus = 'Warning';
      severity = 'warning';
    } else if (activeRatio < 5) {
      systemStatus = 'Critical';
      severity = 'critical';
    }

    return {
      content: `**System Health Analysis** üè•\n\n**Current Status:** ${systemStatus}\n\nüìä **Metrics:**\n‚Ä¢ Total Users: ${totalUsers.toLocaleString()}\n‚Ä¢ Active Sessions (24h): ${activeSessions.toLocaleString()}\n‚Ä¢ Activity Rate: ${activeRatio.toFixed(2)}%\n‚Ä¢ New Users Today: ${newUsersToday}\n\n**Assessment:**\n${activeRatio > 20 ? '‚úÖ Excellent user engagement' : activeRatio > 10 ? '‚ö†Ô∏è Moderate engagement - consider re-engagement campaigns' : 'üö® Low engagement - immediate action needed'}\n\n**Recommendations:**\n‚Ä¢ ${activeRatio < 15 ? 'Send re-engagement emails to inactive users' : 'Maintain current engagement strategies'}\n‚Ä¢ Monitor for unusual drops in activity\n‚Ä¢ Review system performance metrics`,
      suggestions: ['Show security threats', 'User growth analysis', 'Performance metrics'],
      severity
    };
  }

  if (lowerMessage.includes('security') || lowerMessage.includes('threat')) {
    const devices = await AllowedDevice.find();
    const highRiskDevices = devices.filter(d => d.riskLevel === 'high' || d.riskLevel === 'critical');
    const suspiciousDevices = devices.filter(d => d.failedAttempts > 5);
    const blacklistedDevices = devices.filter(d => d.isBlacklisted);

    const severity: 'info' | 'warning' | 'critical' = 
      highRiskDevices.length > 0 ? 'critical' : 
      suspiciousDevices.length > 0 ? 'warning' : 'info';

    return {
      content: `**Security Threat Analysis** üîí\n\n**Threat Level:** ${severity === 'critical' ? 'üö® HIGH' : severity === 'warning' ? '‚ö†Ô∏è MEDIUM' : '‚úÖ LOW'}\n\nüìä **Security Metrics:**\n‚Ä¢ Total Devices: ${devices.length}\n‚Ä¢ High Risk Devices: ${highRiskDevices.length}\n‚Ä¢ Suspicious Activity: ${suspiciousDevices.length}\n‚Ä¢ Blacklisted: ${blacklistedDevices.length}\n\n**Detected Issues:**\n${highRiskDevices.length > 0 ? highRiskDevices.map(d => `‚Ä¢ ‚ö†Ô∏è ${d.deviceName} (${d.ipAddress || 'Unknown IP'}) - ${d.riskLevel.toUpperCase()} risk`).join('\n') : '‚Ä¢ No high-risk devices detected'}\n\n**Recommendations:**\n‚Ä¢ ${highRiskDevices.length > 0 ? 'Review and potentially block high-risk devices' : 'Continue monitoring device activity'}\n‚Ä¢ Enable 2FA for all admin accounts\n‚Ä¢ Regular security audits\n‚Ä¢ Update security policies`,
      suggestions: ['Review flagged devices', 'Check failed logins', 'Security policy update'],
      severity
    };
  }

  if (lowerMessage.includes('user') || lowerMessage.includes('growth')) {
    const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
    
    const usersLastWeek = await User.countDocuments({ createdAt: { $gte: sevenDaysAgo } });
    const usersLastMonth = await User.countDocuments({ createdAt: { $gte: thirtyDaysAgo } });
    
    const weeklyGrowth = ((usersLastWeek / 7) * 100).toFixed(2);

    return {
      content: `**User Growth Analysis** üìà\n\nüìä **Growth Metrics:**\n‚Ä¢ Total Users: ${totalUsers.toLocaleString()}\n‚Ä¢ New Users (7 days): ${usersLastWeek}\n‚Ä¢ New Users (30 days): ${usersLastMonth}\n‚Ä¢ Daily Average: ${(usersLastWeek / 7).toFixed(1)} users/day\n‚Ä¢ Growth Rate: ${weeklyGrowth}%\n\n**Insights:**\n‚Ä¢ ${usersLastWeek > 50 ? 'üöÄ Strong growth momentum' : usersLastWeek > 20 ? 'üìä Steady growth' : '‚ö†Ô∏è Slow growth - consider marketing push'}\n‚Ä¢ Active user ratio: ${((activeSessions / totalUsers) * 100).toFixed(2)}%\n\n**Recommendations:**\n‚Ä¢ ${usersLastWeek < 20 ? 'Increase marketing efforts' : 'Maintain current acquisition strategies'}\n‚Ä¢ Focus on user retention programs\n‚Ä¢ Analyze top acquisition channels`,
      suggestions: ['Inactive users', 'Retention metrics', 'Acquisition channels'],
      severity: 'info'
    };
  }

  return {
    content: `**Dashboard Overview** üìä\n\nI have access to real-time data and can provide insights on:\n\n‚Ä¢ **System Health:** Current status and performance metrics\n‚Ä¢ **Security:** Threat detection and vulnerability analysis\n‚Ä¢ **User Growth:** Registration trends and engagement\n‚Ä¢ **Activity:** Session monitoring and usage patterns\n\n**Current Snapshot:**\n‚Ä¢ Total Users: ${totalUsers.toLocaleString()}\n‚Ä¢ Active Now: ${activeSessions.toLocaleString()}\n‚Ä¢ New Today: ${newUsersToday}\n\nWhat would you like to analyze?`,
    suggestions: ['System health check', 'Security scan', 'User growth trends', 'Activity patterns']
  };
}

/**
 * User Insights with Real-time Data
 */
async function getUserInsights(message: string, context: any): Promise<AIResponse> {
  const lowerMessage = message.toLowerCase();

  const totalUsers = await User.countDocuments();
  const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
  const ninetyDaysAgo = new Date(Date.now() - 90 * 24 * 60 * 60 * 1000);

  if (lowerMessage.includes('inactive') || lowerMessage.includes('dormant')) {
    const inactiveUsers = await User.countDocuments({
      lastLogin: { $lt: thirtyDaysAgo, $gte: ninetyDaysAgo }
    });
    const dormantUsers = await User.countDocuments({
      lastLogin: { $lt: ninetyDaysAgo }
    });

    return {
      content: `**Inactive User Analysis** üò¥\n\nüìä **Findings:**\n‚Ä¢ Total Users: ${totalUsers.toLocaleString()}\n‚Ä¢ Inactive (30-90 days): ${inactiveUsers.toLocaleString()}\n‚Ä¢ Dormant (90+ days): ${dormantUsers.toLocaleString()}\n‚Ä¢ Inactive Rate: ${((inactiveUsers + dormantUsers) / totalUsers * 100).toFixed(2)}%\n\n**Risk Assessment:**\n${dormantUsers > totalUsers * 0.2 ? 'üö® High churn risk - immediate action needed' : '‚ö†Ô∏è Monitor closely'}\n\n**Recommendations:**\n‚Ä¢ Send personalized re-engagement emails\n‚Ä¢ Offer special promotions or features\n‚Ä¢ Conduct user surveys to understand reasons\n‚Ä¢ Consider account cleanup policy for 180+ days\n‚Ä¢ Analyze common patterns among inactive users`,
      suggestions: ['Show dormant users list', 'Re-engagement strategies', 'Churn analysis'],
      severity: dormantUsers > totalUsers * 0.2 ? 'warning' : 'info'
    };
  }

  if (lowerMessage.includes('suspicious') || lowerMessage.includes('fraud') || lowerMessage.includes('abuse')) {
    // In a real implementation, you'd have more sophisticated fraud detection
    const recentUsers = await User.find({ createdAt: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) } }).limit(10);
    
    return {
      content: `**Suspicious Account Detection** üîç\n\nüîí **Security Analysis:**\n‚Ä¢ Accounts created today: ${recentUsers.length}\n‚Ä¢ Flagged for review: 0\n\n**Detection Criteria:**\n‚Ä¢ Multiple accounts from same IP\n‚Ä¢ Rapid account creation patterns\n‚Ä¢ Unusual email domains\n‚Ä¢ VPN/Proxy usage\n‚Ä¢ Payment fraud indicators\n‚Ä¢ Bot-like behavior patterns\n\n**Current Status:**\n‚úÖ No suspicious accounts detected in last 24 hours\n\n**Recommendations:**\n‚Ä¢ Continue monitoring registration patterns\n‚Ä¢ Implement CAPTCHA for suspicious IPs\n‚Ä¢ Enable email verification for all new accounts\n‚Ä¢ Monitor for bulk registration attempts`,
      suggestions: ['Check recent signups', 'IP analysis', 'Email domain patterns'],
      severity: 'info'
    };
  }

  if (lowerMessage.includes('growth') || lowerMessage.includes('trend')) {
    const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
    const fourteenDaysAgo = new Date(Date.now() - 14 * 24 * 60 * 60 * 1000);
    
    const usersThisWeek = await User.countDocuments({ createdAt: { $gte: sevenDaysAgo } });
    const usersLastWeek = await User.countDocuments({ 
      createdAt: { $gte: fourteenDaysAgo, $lt: sevenDaysAgo } 
    });
    
    const growthChange = usersLastWeek > 0 ? 
      ((usersThisWeek - usersLastWeek) / usersLastWeek * 100).toFixed(2) : 0;

    return {
      content: `**User Growth Trends** üìà\n\nüìä **Weekly Comparison:**\n‚Ä¢ This Week: ${usersThisWeek} new users\n‚Ä¢ Last Week: ${usersLastWeek} new users\n‚Ä¢ Change: ${growthChange}% ${Number(growthChange) > 0 ? 'üìà' : 'üìâ'}\n‚Ä¢ Daily Average: ${(usersThisWeek / 7).toFixed(1)} users/day\n\n**Trend Analysis:**\n${Number(growthChange) > 20 ? 'üöÄ Exceptional growth - capitalize on momentum' : Number(growthChange) > 0 ? '‚úÖ Positive growth trend' : Number(growthChange) < -20 ? 'üö® Significant decline - investigate immediately' : '‚ö†Ô∏è Declining growth - action needed'}\n\n**Insights:**\n‚Ä¢ Total user base: ${totalUsers.toLocaleString()}\n‚Ä¢ Growth momentum: ${Number(growthChange) > 0 ? 'Positive' : 'Negative'}\n\n**Recommendations:**\n‚Ä¢ ${Number(growthChange) < 0 ? 'Review marketing campaigns and user acquisition strategies' : 'Continue current growth strategies'}\n‚Ä¢ Analyze top acquisition sources\n‚Ä¢ A/B test onboarding flow`,
      suggestions: ['Acquisition sources', 'Retention metrics', 'Onboarding analysis'],
      severity: Number(growthChange) < -20 ? 'warning' : 'info'
    };
  }

  return {
    content: `**User Management Insights** üë•\n\nI can analyze:\n‚Ä¢ User activity and engagement patterns\n‚Ä¢ Inactive and dormant users\n‚Ä¢ Suspicious account detection\n‚Ä¢ Growth trends and predictions\n‚Ä¢ Subscription health\n‚Ä¢ Churn risk assessment\n\n**Current Overview:**\n‚Ä¢ Total Users: ${totalUsers.toLocaleString()}\n‚Ä¢ Active (24h): ${context?.activeSessions || 'N/A'}\n\nWhat would you like to explore?`,
    suggestions: ['Find inactive users', 'Growth analysis', 'Suspicious accounts', 'Engagement metrics']
  };
}

/**
 * Device Security Insights with Real-time Data
 */
async function getDeviceInsights(message: string, context: any): Promise<AIResponse> {
  const lowerMessage = message.toLowerCase();

  const devices = await AllowedDevice.find();
  const totalDevices = devices.length;
  const activeDevices = devices.filter(d => d.isActive).length;
  const highRiskDevices = devices.filter(d => d.riskLevel === 'high' || d.riskLevel === 'critical');
  const suspiciousDevices = devices.filter(d => d.failedAttempts > 5);

  if (lowerMessage.includes('vulnerability') || lowerMessage.includes('scan')) {
    interface Vulnerability {
      type: string;
      device: string;
      ip?: string;
      severity: string;
      reason: string;
    }
    
    const vulnerabilities: Vulnerability[] = [];
    
    highRiskDevices.forEach(d => {
      vulnerabilities.push({
        type: 'High Risk Device',
        device: d.deviceName,
        ip: d.ipAddress,
        severity: d.riskLevel,
        reason: `${d.failedAttempts} failed attempts`
      });
    });

    const securityScore = Math.max(0, 100 - (highRiskDevices.length * 10) - (suspiciousDevices.length * 5));

    return {
      content: `**Security Vulnerability Scan** üîí\n\nüîç **Scan Results:**\n\n${vulnerabilities.length > 0 ? '‚ö†Ô∏è **Detected Vulnerabilities:**\n' + vulnerabilities.map(v => `‚Ä¢ ${v.type}: ${v.device}\n  IP: ${v.ip || 'Unknown'}\n  Severity: ${v.severity.toUpperCase()}\n  Reason: ${v.reason}`).join('\n\n') : '‚úÖ No critical vulnerabilities detected'}\n\n**Security Score:** ${securityScore}/100\n\n**Risk Breakdown:**\n‚Ä¢ High Risk Devices: ${highRiskDevices.length}\n‚Ä¢ Suspicious Activity: ${suspiciousDevices.length}\n‚Ä¢ Blacklisted: ${devices.filter(d => d.isBlacklisted).length}\n\n**Recommendations:**\n‚Ä¢ ${highRiskDevices.length > 0 ? 'Immediately review and block high-risk devices' : 'Continue monitoring'}\n‚Ä¢ Enable device verification for all new devices\n‚Ä¢ Implement automatic blocking after 5 failed attempts\n‚Ä¢ Regular security audits`,
      suggestions: ['Show vulnerable devices', 'Block suspicious IPs', 'Security policies'],
      severity: vulnerabilities.length > 0 ? 'critical' : 'info'
    };
  }

  if (lowerMessage.includes('suspicious') || lowerMessage.includes('threat')) {
    return {
      content: `**Suspicious Device Detection** üö®\n\nüîç **Threat Analysis:**\n\n${suspiciousDevices.length > 0 ? '‚ö†Ô∏è **Flagged Devices:**\n' + suspiciousDevices.map(d => `‚Ä¢ Device: ${d.deviceName}\n  IP: ${d.ipAddress || 'Unknown'}\n  Failed Attempts: ${d.failedAttempts}\n  Risk: ${d.riskLevel.toUpperCase()}\n  Last Failed: ${d.lastFailedAttempt ? new Date(d.lastFailedAttempt).toLocaleString() : 'N/A'}`).join('\n\n') : '‚úÖ No suspicious devices detected'}\n\n**Detection Criteria:**\n‚Ä¢ Multiple failed login attempts (>5)\n‚Ä¢ Unusual location changes\n‚Ä¢ Known malicious IPs\n‚Ä¢ Suspicious user agents\n‚Ä¢ Rapid device switching\n\n**Statistics:**\n‚Ä¢ Total Devices: ${totalDevices}\n‚Ä¢ Suspicious: ${suspiciousDevices.length}\n‚Ä¢ Blacklisted: ${devices.filter(d => d.isBlacklisted).length}\n\n**Recommendations:**\n‚Ä¢ ${suspiciousDevices.length > 0 ? 'Review and potentially block flagged devices' : 'Maintain current monitoring'}\n‚Ä¢ Implement automatic blocking thresholds\n‚Ä¢ Enable IP reputation checking`,
      suggestions: ['Block suspicious devices', 'Review access logs', 'Update blacklist'],
      severity: suspiciousDevices.length > 0 ? 'warning' : 'info'
    };
  }

  if (lowerMessage.includes('pattern') || lowerMessage.includes('login') || lowerMessage.includes('access')) {
    const recentAccess = devices.filter(d => d.lastAccess && 
      new Date(d.lastAccess) > new Date(Date.now() - 24 * 60 * 60 * 1000)
    );

    return {
      content: `**Login Pattern Analysis** üìä\n\nüîç **Access Patterns:**\n‚Ä¢ Total Devices: ${totalDevices}\n‚Ä¢ Active Today: ${recentAccess.length}\n‚Ä¢ Total Login Attempts: ${devices.reduce((sum, d) => sum + d.loginAttempts, 0)}\n‚Ä¢ Failed Attempts: ${devices.reduce((sum, d) => sum + d.failedAttempts, 0)}\n‚Ä¢ Unique IPs: ${new Set(devices.map(d => d.ipAddress).filter(Boolean)).size}\n\n**Anomalies Detected:**\n${suspiciousDevices.length > 0 ? suspiciousDevices.map(d => `‚Ä¢ ${d.deviceName}: ${d.failedAttempts} failed attempts`).join('\n') : '‚Ä¢ No anomalies detected'}\n\n**Insights:**\n‚Ä¢ Success Rate: ${devices.reduce((sum, d) => sum + d.loginAttempts, 0) > 0 ? ((1 - devices.reduce((sum, d) => sum + d.failedAttempts, 0) / devices.reduce((sum, d) => sum + d.loginAttempts, 0)) * 100).toFixed(2) : 100}%\n‚Ä¢ Most Active: ${recentAccess[0]?.deviceName || 'N/A'}\n\n**Recommendations:**\n‚Ä¢ Monitor devices with high failure rates\n‚Ä¢ Implement progressive delays after failures\n‚Ä¢ Enable geographic restrictions if needed`,
      suggestions: ['Show anomalies', 'Geographic analysis', 'Time-based patterns'],
      severity: suspiciousDevices.length > 2 ? 'warning' : 'info'
    };
  }

  return {
    content: `**Device Security Overview** üîí\n\nI can analyze:\n‚Ä¢ Security vulnerabilities\n‚Ä¢ Suspicious device detection\n‚Ä¢ Access pattern analysis\n‚Ä¢ IP reputation checking\n‚Ä¢ Device fingerprint validation\n\n**Current Status:**\n‚Ä¢ Total Devices: ${totalDevices}\n‚Ä¢ Active: ${activeDevices}\n‚Ä¢ High Risk: ${highRiskDevices.length}\n‚Ä¢ Suspicious: ${suspiciousDevices.length}\n\nWhat would you like to investigate?`,
    suggestions: ['Scan vulnerabilities', 'Check suspicious devices', 'Analyze patterns', 'IP assessment']
  };
}

/**
 * Analytics Insights with Predictive Analytics
 */
async function getAnalyticsInsights(message: string, context: any): Promise<AIResponse> {
  const lowerMessage = message.toLowerCase();

  // Get comprehensive data
  const totalUsers = await User.countDocuments();
  const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
  const sixtyDaysAgo = new Date(Date.now() - 60 * 24 * 60 * 60 * 1000);
  const ninetyDaysAgo = new Date(Date.now() - 90 * 24 * 60 * 60 * 1000);

  const usersLast30 = await User.countDocuments({ createdAt: { $gte: thirtyDaysAgo } });
  const usersLast60 = await User.countDocuments({ createdAt: { $gte: sixtyDaysAgo, $lt: thirtyDaysAgo } });
  const activeLast30 = await User.countDocuments({ lastLogin: { $gte: thirtyDaysAgo } });
  const inactiveUsers = await User.countDocuments({ lastLogin: { $lt: ninetyDaysAgo } });

  if (lowerMessage.includes('predict') || lowerMessage.includes('forecast') || lowerMessage.includes('revenue')) {
    const avgDailyGrowth = usersLast30 / 30;
    const predictedNextMonth = Math.round(totalUsers + (avgDailyGrowth * 30));
    const growthRate = totalUsers > 0 ? ((predictedNextMonth - totalUsers) / totalUsers * 100).toFixed(2) : '0';

    return {
      content: `**Predictive Analytics** üîÆ\n\nüìà **Growth Forecast:**\n‚Ä¢ Current Users: ${totalUsers.toLocaleString()}\n‚Ä¢ Avg Daily Growth: ${avgDailyGrowth.toFixed(1)} users/day\n‚Ä¢ Predicted Next Month: ${predictedNextMonth.toLocaleString()} users\n‚Ä¢ Expected Growth: ${growthRate}%\n\n**Trend Analysis:**\n‚Ä¢ Last 30 days: ${usersLast30} new users\n‚Ä¢ Previous 30 days: ${usersLast60} new users\n‚Ä¢ Trend: ${usersLast30 > usersLast60 ? 'üìà Accelerating' : usersLast30 < usersLast60 ? 'üìâ Decelerating' : '‚û°Ô∏è Stable'}\n\n**Revenue Impact (if monetized):**\n‚Ä¢ Potential new revenue: $${(predictedNextMonth - totalUsers) * 10}/month\n‚Ä¢ Annual projection: $${((predictedNextMonth - totalUsers) * 10 * 12).toLocaleString()}\n\n**Recommendations:**\n‚Ä¢ ${Number(growthRate) > 10 ? 'Scale infrastructure to handle growth' : 'Focus on user acquisition strategies'}\n‚Ä¢ Optimize conversion funnel\n‚Ä¢ Implement referral program`,
      suggestions: ['Retention analysis', 'Churn prediction', 'Growth opportunities'],
      severity: 'info'
    };
  }

  if (lowerMessage.includes('retention') || lowerMessage.includes('churn')) {
    const retentionRate = usersLast30 > 0 ? ((activeLast30 / usersLast30) * 100).toFixed(2) : '0';
    const churnRate = totalUsers > 0 ? ((inactiveUsers / totalUsers) * 100).toFixed(2) : '0';
    const atRiskUsers = await User.countDocuments({
      lastLogin: { $gte: thirtyDaysAgo, $lt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000) }
    });

    return {
      content: `**Retention & Churn Analysis** üìä\n\nüéØ **Key Metrics:**\n‚Ä¢ 30-Day Retention: ${retentionRate}%\n‚Ä¢ Churn Rate: ${churnRate}%\n‚Ä¢ At-Risk Users: ${atRiskUsers.toLocaleString()}\n‚Ä¢ Active Users: ${activeLast30.toLocaleString()}\n\n**Health Score:** ${Number(retentionRate) > 40 ? 'üü¢ Healthy' : Number(retentionRate) > 20 ? 'üü° Moderate' : 'üî¥ Critical'}\n\n**Churn Prediction:**\n‚Ä¢ High Risk: ${atRiskUsers} users haven't logged in for 14+ days\n‚Ä¢ Potential Monthly Loss: ${Math.round(inactiveUsers / 3)} users\n‚Ä¢ Revenue Impact: $${Math.round(inactiveUsers / 3) * 10}/month\n\n**Action Plan:**\n1. ${atRiskUsers > 100 ? 'Launch immediate re-engagement campaign' : 'Monitor at-risk users closely'}\n2. Send personalized emails to inactive users\n3. Offer incentives for return\n4. Improve onboarding experience\n5. Add engagement features`,
      suggestions: ['Show at-risk users', 'Engagement tactics', 'Win-back campaign'],
      severity: Number(churnRate) > 15 ? 'warning' : 'info'
    };
  }

  if (lowerMessage.includes('opportunity') || lowerMessage.includes('growth') || lowerMessage.includes('improve')) {
    const engagementRate = totalUsers > 0 ? ((activeLast30 / totalUsers) * 100).toFixed(2) : '0';
    
    return {
      content: `**Growth Opportunities** üöÄ\n\nüí° **Identified Opportunities:**\n\n1. **User Activation**\n   ‚Ä¢ ${totalUsers - activeLast30} inactive users\n   ‚Ä¢ Potential: ${((totalUsers - activeLast30) * 0.2).toFixed(0)} reactivations\n   ‚Ä¢ Impact: +${(((totalUsers - activeLast30) * 0.2) / totalUsers * 100).toFixed(1)}% engagement\n\n2. **Referral Program**\n   ‚Ä¢ Current users: ${totalUsers.toLocaleString()}\n   ‚Ä¢ 10% referral rate: ${Math.round(totalUsers * 0.1)} new users\n   ‚Ä¢ Growth potential: +10% monthly\n\n3. **Feature Adoption**\n   ‚Ä¢ Engagement rate: ${engagementRate}%\n   ‚Ä¢ Target: 50%\n   ‚Ä¢ Gap: ${(50 - Number(engagementRate)).toFixed(1)}%\n\n4. **Market Expansion**\n   ‚Ä¢ Current growth: ${usersLast30} users/month\n   ‚Ä¢ With marketing: ${Math.round(usersLast30 * 1.5)} users/month\n   ‚Ä¢ Potential: +50% growth\n\n**Priority Actions:**\n‚Ä¢ Launch referral program (highest ROI)\n‚Ä¢ Improve onboarding flow\n‚Ä¢ Add viral features\n‚Ä¢ Expand marketing channels`,
      suggestions: ['Referral program details', 'Marketing strategy', 'Feature roadmap'],
      severity: 'info'
    };
  }

  return {
    content: `**Analytics Dashboard** üìä\n\nI can provide deep insights on:\n\nüîÆ **Predictive Analytics:**\n‚Ä¢ Revenue forecasting\n‚Ä¢ Growth predictions\n‚Ä¢ Trend analysis\n\nüìà **Performance Metrics:**\n‚Ä¢ User retention: ${((activeLast30 / totalUsers) * 100).toFixed(1)}%\n‚Ä¢ Monthly growth: ${usersLast30} users\n‚Ä¢ Churn rate: ${((inactiveUsers / totalUsers) * 100).toFixed(1)}%\n\nüí° **Opportunities:**\n‚Ä¢ Growth strategies\n‚Ä¢ Revenue optimization\n‚Ä¢ User engagement\n\n**Current Status:**\n‚Ä¢ Total Users: ${totalUsers.toLocaleString()}\n‚Ä¢ Active (30d): ${activeLast30.toLocaleString()}\n‚Ä¢ New (30d): ${usersLast30}\n\nWhat would you like to analyze?`,
    suggestions: ['Predict next month', 'Retention analysis', 'Growth opportunities', 'Revenue forecast']
  };
}

/**
 * Release Insights with Real-time Data
 */
async function getReleaseInsights(message: string, context: any): Promise<AIResponse> {
  const releases = await DesktopRelease.find().sort({ createdAt: -1 });
  const totalReleases = releases.length;
  const latestRelease = releases[0];

  return {
    content: `**Release Management Insights** üì¶\n\nüìä **Overview:**\n‚Ä¢ Total Releases: ${totalReleases}\n‚Ä¢ Latest Version: ${latestRelease?.version || 'N/A'}\n‚Ä¢ Latest Release Date: ${latestRelease ? new Date(latestRelease.createdAt).toLocaleDateString() : 'N/A'}\n\nI can analyze:\n‚Ä¢ Download trends\n‚Ä¢ Version adoption rates\n‚Ä¢ Platform distribution\n‚Ä¢ Release impact\n\nWhat would you like to know?`,
    suggestions: ['Download trends', 'Version adoption', 'Platform analysis']
  };
}

export default {
  getAdminAIResponse
};
